/*
 102. 二叉树的层次遍历
 给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。
 */
void printfTreeLevel(struct TreeNode *tree){
    if(!tree) return;
    
    struct TreeNode *T[65535];
    T[0] = tree;
    int font = 0,rear = 1;
    while (font<rear) {
        printf("%d,",T[font]->val);
        
        if(T[font]->left) T[rear++] = T[font]->left;
        if(T[font]->right) T[rear++] = T[font]->right;
        
        font++;
    }
    printf("\n");
}

void printfTreeLevel2(struct TreeNode *tree){
    if(!tree) return;
    
    struct TreeNode *T[65535];
    T[0] = tree;
    int font = 0,rear = 1;
    while (font<rear) {
        int last = rear;
        while (font<last) {
            printf("%d,",T[font]->val);
            
            if(T[font]->left) T[rear++] = T[font]->left;
            if(T[font]->right) T[rear++] = T[font]->right;
            
            font++;
        }
        printf("\n");
    }
    printf("\n");
}

int** levelOrder(struct TreeNode* root, int** columnSizes, int* returnSize) {
    int **res = malloc(10000);
    if(!root) return res;
    
    struct TreeNode *T[65535];
    T[0] = root;
    int font = 0,rear = 1,i=0;
    while (font<rear) {
        int last = rear;
        int j=0;
        res[i] = malloc(10000);
        while (font<last) {
            //printf("%d,",T[font]->val);
            res[i][j++] = T[font]->val;
            
            if(T[font]->left) T[rear++] = T[font]->left;
            if(T[font]->right) T[rear++] = T[font]->right;
            
            font++;
        }
        i++;
        //printf("\n");
    }
    return res;
}

